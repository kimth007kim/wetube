#3.0 MongoDB and Mongoose
MongoDB를 사용하는 기업은: facebook,google,EA,Nokia등등이 사용한다.
이제 준비는 끝났고 MongoDB를 받으러 가보자.
DB는 많이있지만 크게 두가지로 분류가 된다. SQL과 NoSQL로 나뉘어진다.
MongoDB는 쩐다. MongoDB는 NoSQL로 분류된다.
특징은 규칙이 적고 엄청 유연하다. 많은 부분을 수정할 수 있다. 반면, 어떤 사람들은 규칙이 너무 적고
모든게 너무크고 어떤 부분에서 너무 실험적이어서 싫어한다. 그래서어떤회사는 쓰고 어떤회사는 사용하고 후회한다.
MongoDB는 더 적은 규칙과 더 적은 절차로 작업이 가능한 데이터 베이스 이다.
많은 사람들이 MongoDB를 사용하고있다. 엄청 가볍고 초보자들도 쉽게 다룰수 있기 때문이다. 사용하기 엄청 쉽고 직관적으로 작동한다.
우리가 해야할일은 이 주소로 와서 무언가를 다운로드 받는게 아니다.

홈페이지->MongoCE(Community Edition) 또는 Community Server을 들어간다.
그리고 버전과 OS를 확인하고 다운로드한다,
다 설치가 완료되면 콘솔창에 mongod를 쳐서 잘 설치 되었는지 확인한다.

윈도우 10에서 다운로드 > 설치 후 mongod가 실행되지 않는다면 다음을 따라서 환경변수 추가를 해보세요.
1. [내컴퓨터] 우클릭 > [고급시스템설정] > [환경변수(N)]
2. 시스템변수 리스트 중 'Path'를 선택하고 편집을 선택한 후 'Mongodb의 설치경로￦bin'을 추가
3. vscode 재실행 후 터미널에 'mongod'입력하면 해결된다.

환경변수의 문제였다(해결됨)
이렇게 mongodb를 설치하고나서 mongod 와 mongo 명령어가 동작을 한다면 정상적으로 설치한것이다.
-명령어
$mongo		//몽고db실행
$exit		//몽고db종료
여기 =까지 완료되었다면 Mongo를 JavaScript와 연결해보자. 두가지가 있는데 하나는 MongoDB이고 다른하나는 Javascript의 Node.JS이다.
MongoDB는 C++이나 다른것으로 만들어졌기 때문에 Adapter가 필요하다.
자바스크립트로 코드를 작성하고 싶으면 MongoDB로부터 Instruction을 받아야한다. 그리고 이걸 귀여운 Mongoose가 해줄것이다.
NodeJS를 위한 멋진 MongoDB Object이다.
설치하기 엄청 간단하다.
npm install mongoose라고 치기만 하면된다.
Database를 가지고 이용하려면 mongodb와 mongoose 둘다 필요로한다.

그리고 같은서버에서 다양한 종류의 Database들을 사용할수 있다. 이 강의에서는 한가지만 사용할것이다.
채팅을 만든다면 MongoDB는 적합한 Database가 될것이다. 왜냐하면 생성이 매우 빠르고 엄격하지 않기 때문이다.
자 이제 필요한 두가지가 설치되었으니, 임시로 만들어 놓은 db.js를 지우고 진짜 MongoDB를 연결하자

#3.1 Connecting to MongoDB

우리가 해야할것.
첫번째로 Database에 관련된걸 하고, 어떤 유저에게나 영상을 보고, 검색하고 수정하고 삭제할 수 있게 할것이다.
영상 업로드도 물론이다. 누구나 사용할수 있는 플랫폼 같은것이다. 그리고 CSS를 할것이다. 모든걸 이쁘게 만들고
유저 프로필과 그 외에 엄청 간단한 것들을 위한 마지막 법칙을 추가할것이다. 이 application에서 유저 부분은 엄청 작은 부분이다.

정리
1. Database 관련 작업
2. 누구나 사용할수 있게 만들기(업로드,시청)등등

기능적으로 누구나 사용할수 있게 만들고 Front-end로 가서 좀 더 이쁘게 만들고 마지막에 유저 인증을 추가할것이다.
이제 mongoose가 설치되었고 'dotenv'라는것을 설치할것이다.
-npm install dotenv
그리고 설치가 완료되면 db.js에서
import mongoose from 'mongoose'
라고 입력하자. 그리고 dotenv는 inport하지 않은 상태에서 왜 template가 필요한지 확인을 해보자.
그리고 db.js에서 
mongoose.connect();
라고 입력하자. 여기서 우리한테 요청하는것은 string으로 된 Database이다. 어디에 Database가 저장되어있는지 알려주는것이다.
Database의 URL을 적을것인데 그전에  콘솔창에 'mongo' 를 먼저 해보자. 그리고 콘솔창에 'mongod' 를 실행하자
그리고 포트를 찾자.
2020-06-06T23:14:40.617+0900 I  CONTROL  [initandlisten] MongoDB starting : pid=16512 
port=27017 dbpath=C:\data\db\ 64-bit host=DESKTOP-I58M2RT 
여기서 port=27017 이다. 그 다음으로 우리는 mongoose.connect안에다가 URL을 넣을것인데 순서는
'mongodb://localhost:포트번호/Database이름' 순서이다. 그리고 다음인자는 왜 적냐면 새로운 버전의 mongoose는 이런식으로 Configuration을 보낼수 있다.
그리고 인자들을 여기에 적어 놓는 이유는 이것들이 무슨역할을 하는지 알아서 그런게 아니라 내가 MongoDB를 사용할때 마다 물어봐서 그렇다(그렇게 중요하지 않다.)
mongoose.connect("mongodb://localhost:27017/we-tube", { userNewUrlParser: true, useFindAndModify:false});

그리고 다음으로 할것은 mongoDB와의 연결을 'db'로 저장한 후에 나중에 export 할것이다.
const db = mongoose.connection;

그리고 우리가 할것은 연결이 되었으면 되었다고 알려주고 안되면 왜안되는지 알려주는것이다.

const handleOpen = () => console.log("✔ Connected to DB");			//연결됨을 알리는 함수
const handleOpen = (error) => console.log(`❌ Error on DB Connection:${error}`);	//연결 안되면 왜안돼는지 알려주는함수

db.once("open", handleOpen);						//한번실행한다 오픈되면 handleopen을 
db.on("error", handleError);							//error가 뜨면 handleError함수를 실행

그리고 init.js에서 db만 임포트해준다.
import "./db" 
이렇게 해주면 우리는 Database와 연결되었다. 
이제 dotenv에 대해서 이야기 해보자 dotenv를 설치한 이유는 가끔 내가 어떤 부분을 숨겨 놓고 싶을수 있기 떄문이다.
지금은 localhost에 설치된 MongoDB이지만 다른 곳에 설치된다면 어떻게 될까? 내 코드에 있는 URL로 부터 유저 데이터를 보는걸 원하지 않을 것이다.
이때 dotenv를 사용하는것이다. 그건 다음영상에서 알아보자.
내가 오픈소스 프로젝트를 하고있다고 가정하고 내 DB를 숨겨놓고싶다. 이파일을 Github에 올려놓으면 어디에 DB가 있는지 알게 될것이다. 지금은 localhost라서 괜찮다.
그러나 실제 Application 으로 만들었을때 문제가 생긴다. 이때 dotenv를 사용한다.



#3.2 Configuring Dot Env
dotenv를 구성해보자 dotenv를 구성하기 위해 처음으로 해야할 것은 여기에 .env라는 파일을 생성하는거야
이름은 environment나 secret으로 하나 상관없다.
그리고 만든 .env라는 파일안에다가
MONGO_URL="mongodb://localhost:27017/we-tube"		//우리의 url 주소
PORT=4000						//port번호
이렇게 작성해준다.

그리고 db.js에서는 누구나 볼 수있는 URL 대신에 지우고 .env로 부터 그정보를 가져오도록하자.
import dotenv from"dotenv";		//dotenv를 import해서 dotenv변수에넣음
dotenv.config();				// .env파일안에 있는 정보를 불러올수있다. 그리고 찾은 모든 변수들을 process.env.key에 저장할것이다.

mongoose.connect(process.env.MONGO_URL, {		//process.env아래에 MONGO URL이 있다.
  useNewUrlParser: true,
  useFindAndModify: false,
  useUnifiedTopology: true,
});

이렇게하면 잘 연결된다. 그리고 init.js에도 똑같이 적용하자.
import dotenv from "dotenv";			//dotenv를 import한다.
dotenv.config();					//.env파일안에 있는 정보를 불러올수있다. 그리고 찾은 모든 변수들을  process.env.key에 저장

const PORT = process.env.PORT || 4000;		//Port번호를 dotenv에있는 PORT에서 가져오거나 대상을 못찾으면 4000으로한다.
이런식으로 key를 숨기는것이다. 이렇게 하면 키가 다른곳에서 보이지 않는다.
.env파일을 .gitignore파일에 추가해서 ignore 하는것을 잊지말자. 그렇지 않으면 이렇게 한게 헛고생이다. 내 키가 Github에 올라가게 되기 때문이다.
이게 Enviroment Variable을 쓰는 방법이고 내가 원하면 얼마든 만들수 있지만 이정도만 하자.
다음 영상에서는 Model을 만들도록하자.


#3.3 Video Model

MongoDB의 장점은 document를 줄여준다는 것이다. document는 jsonfile이다. 이게 MONGODB가 완벽한 이유이다.
하지만 MONGODB에 우리의 파일들이 어떤 식으로 생겨야 할지 알려줘야 한다. 아무거나 생성할수 없다.
파일에 보안은 아니고 타당성이 어느정도 필요하다. 예를 들어 'MongoDB야, 우리들의 file은 video라는 이름을 가질 거야'
그리고 모든 video들은 string type을 가질거고 그 String의 이름은 title일것이다. video들은 view를 가질것이다.
그리고 view는 1,2,3..같은 number type 일것이다. 이런게 파일의 형태, model의 형태이다. 이것들은 models라는 폴더에 저장될것이다.
models라는 폴더를 생성하고 Video.js를 생성하자.
여기선 모두 대문자로 적을것이다. 여기서 내 Video들의 형태를 정의 할것이다.

import mongoose from "mongoose";		//mongoose를 임포트하고

해야할것 하나는 model 즉 document name이고 다른 하나는 schema이다 schema는 형태이다.

const VideoSchema = new mongoose.Schema({})						// 이친구

이렇게하고 여기에 schema를 정의하자 이건 이럴거고~ 저건 저럴거고~ 이렇게 말이다.
먼저 Video는 URL을 가질것이다. 우리는 Video를 Database에 저장하지 않을것이다.
bytes를 저장하는게 아니라 Video의 link를 집어 넣는것이다. 우리의 경우에는 우리 서버(Amazon)에 Video를 저장하는 것이다.
Database에 video를 저장하지 않는다. 이건 그냥 text Database이다. Video의 주소를 넣는것이다. Video 전체를 넣는게 아니다.
그렇게하면 Database가 겁나 무거워진다.

 fileUrl: {
    type: String,				//type은 String
    required: "File URL is required",		//requried로 설정하고 required가 충족되지 못하면 error 메세지는 File URL is required로 설정 (fileUrl값이 없는 Video를 생성하려 한다면 이 error message를 받는다.)
  },  
 title: {					//Video title값도 있을것이다.
    type: String,				//type은 Stirng
    required: "Title is required",		//Title is required
  }, 
  description: String,			//설명의 type은 String
  views: {
    type: Number,				//조회수의 type은 Number
    default: 0,				//초기값 0
  },
  createAt: {				
    type: Date,				
    default: Date.now,			//Date.now 자체는 function이고 Date.now()는 그 함수를 실행해서 현재 날짜를 반환하는것이다.
  },					// 따라서 이렇게 하면 내가 document를 저장할때마다 function을 실행해서 현재 날짜를 받는것이다.
});

그리고 내가 할수있는게 뭐가 있는지 알고 싶다면 mongoose documentation의 schema section에서 모든 option들을 확인할 수 있다.
이제 이 schema를 이용해서 model을 만들어보자. definition을 통해 실제 document를 만드는거다. schema는 definition같은것이다.


const model = mongoose.model("Video", VideoSchema);		//model의 이름은 Video 그리고 Video model의 schema는 VideoSchema가 될것이다. 위에있는 친구이다.
export default model;					
 
여기까지 완료하면 현재 우리 Database는 아직 인지 못하고 있다. 왜냐면 아직 이걸 생성했다는걸 인지하지못하기 때문이다. 연결은 되어있지만 거기에 model이 있다는건 알지 못한다.
그래서 추가를 해줘야 한다. init.js에서 model을 import 하자.

import "./models/Video";


이렇게 까지해주면 아무런 이상없이 작동한다 다음영상에서는 Video comment를 만들것이다.
comment의 model을 만드는것이다. 사람들은 봉통 영상들에 comment를 단다.




#3.4 Comment Model
이제 Comment 모델을 추가해볼것이다. models 폴더 아래에 Comment.js 라는 파일을 생성하자.
그리고 comment는 겁나 쉬울 것이다.

const CommentSchema = new mongoose.Schema({		
  text: {						//comment에는 text가 존재할것이다.
    type: String,					//type형은 String이고
    required: "Text is requried",			//text가 없으면 경고문을 띄운다.
  },
  createAt: {					//생성일자이다.
    type: Date,					//Date형이고
    default: Date.now,				//Date.now자체는 function이고 Date.now()는 그함수를 실행해서 현재 날짜를 반환하는것이다.
  },
});


만약에 이러한 조건이있을때 차이는 무엇이냐면
description: String,		//한줄이면 configuration이 존재하지않아서 바로 type을 적어준다.
  views: {			/Configuration object: configuration이 존재하는경우에는 type:과 configuration을 따로 적어준다.
    type: Number,
    default: 0,
  },

다음으로 알아야 할것은 data의 relationship에 대한것이다.
이 경우에 comment는 자기 자신스스로이다. 
한쪽에서 video를 생성하고 다른 쪽에서 comment를 생성했을때 어떻게 연결시킬것인가 그것이 문제이다.
둘사이에 어떠한 관계가 있는데 이걸 어떻게 연관시킬까?
comment에 video의 ID를 저장하거나 video가 ID의 array를 가지고 있는것이다.
어떤게 어떤 것과 연결되어 있는지 알아야하기때문이다. video에 comment를 달때 이 comment는 어떤 video와 직접적으로 연결이 되어 있는지?

두가지 방법이 있다. 
한가지 방법은 여기 comment는 그대로 두고 혼자 있고, 그리고 video에선 모든 comment ID가 담긴 array를 추가하는것이다.
모든 object들은 보통 ID를 가지고 있어 우리의 이름처럼 말이지, 따라서 모든 comment의 정보를 저장하는 대신 모든 video들이 comment id들을 가지고 있는 것이다.
처음 video를 생성하면 comments는 0 일것이다 왜냐하면 commnet가 없을것이다. 그리고 나서 해당 video에 대한 comment를 생성하면
새로운 comment ID를 video안에 있는 comment의 list 라는곳에 저장하는것 이다. 그러면 comment 가 1이될것이다.

이런식으로 할것이고 두가지 방법을 모두 해볼것이다.

//comment.js
import mongoose from "mongoose";

const CommentSchema = new mongoose.Schema({
  text: {
    type: String,
    required: "Text is requried",
  },
  createAt: {
    type: Date,
    default: Date.now,
  },
  video: {						// 배열로 생성하지 않은 이유는 한명의 사용자가 등록했기 때문이다.
    type: mongoose.Schema.Types.ObjectId,		//이 comment는 이 video와 연결되어 있고 이 video의 type은 mongoose.Schema.Types.ObjectId
    ref: "Video",					// 어떤 objectID가 어디서 온건 지를 알려줘야할것이다. 어느 model에서 온건지! 이 경우에는 Video이다.
  },
});

const model = mongoose.model("Comment", CommentSchema);
export default model;

//Video.js
Video.js에서 Video라는 이름이 똑같이 있어야한다.


import mongoose from "mongoose";

const VideoSchema = new mongoose.Schema({
  fileUrl: {
    type: String,
    required: "File URL is required",
  },
  title: {
    type: String,
    required: "Title is required",
  },
  description: String,
  views: {
    type: Number,
    default: 0,
  },
  createAt: {
    type: Date,
    default: Date.now,
  },
});

const model = mongoose.model("Video", VideoSchema);		//여기에 똑같이 Video라고 되어있다.
export default model;

기본적으로 Database에는 이런 식으로 저장될것이다.
그리고 mongoose에게 말하는것이다. "ID 1에 해당하는 Video를 가져와줘"
그래서 ref를 사용하는것이다 실제로 우리는 Video의 ID를 원하기 때문이다.
좋아요를 저장하거나 유저를 저장하거나 할땐 다른 ref를 사용해야할것이다.
이게 방법 첫번째이다. comment를 생성하면 text와 createAt을 생성하고 video ID는 1

다른방법으로는 Object ID들의 array를 생성해야한다. 
//Video.js
import mongoose from "mongoose";

const VideoSchema = new mongoose.Schema({
  fileUrl: {
    type: String,
    required: "File URL is required",
  },
  title: {
    type: String,
    required: "Title is required",
  },
  description: String,
  views: {
    type: Number,
    default: 0,
  },
  createAt: {
    type: Date,
    default: Date.now,
  },
  comments: [				//Video.js에서 comments를 추가한다. comments는 array이다. 그래서 []를 사용한다.
    {					//왜 배열로 생성했냐면 하나의 Video에 여러명의 사용자가 댓글을 달기 때문이다.
      type: mongoose.Schema.Types.ObjectId,
      ref: "Comment",
    },
  ],
});

const model = mongoose.model("Video", VideoSchema);
export default model;


//Comment.js
import mongoose from "mongoose";

const CommentSchema = new mongoose.Schema({
  text: {
    type: String,
    required: "Text is requried",
  },
  createAt: {
    type: Date,
    default: Date.now,
  },
});

const model = mongoose.model("Comment", CommentSchema);		//model의 이름은 Comment이고 comment Model의 schema는 CommentSchema가 될것이다(위에서 선언함)
export default model;						

이러한 방식으로 하면 모든 Comment의 정보를 여기에 넣는게 아니다. Comment의 ID만 넣는것이다.
[1,2,4,7] 이런식으로 Video와 연결된 Comment들의 ID가 저장된다.

이렇게 두가지 선택지가 있다. 모든 Comment ID들을 array로 video에 집어 넣을것인가? 혹은 Comment에 연결된것을 Video ID를 줄것인가?
그리고 모든걸 다하고 init.js에 import 해주어야한다.

다음영상에서는 Video를 생성해볼것이다.



 #3.5 Home Controller Finished

이렇게 만든 Model들을 어떻게 사용할 수 있을까? 이렇게 만든 Model들을 어떻게 사용할 수 있을까? 믿지 못할 정도로 간단하다.
여기 videoController에서
export const home = (req, res) => {
  res.render("home", { pageTitle: "Home", videos });		//여기서 , videos 이부분
};
 누군가 home으로 가면 여기 videos는 undefined일 것이다.
search 역시 똑같다.
video가 정의 되지 않았다고 error가 뜰것이다. videoController에서 
import Video from "../models/Video" 라고 Video를 model아래에 있는 Video로 부터 임포트해준다.
이건 Database의 element가 아니라 이건 단지 model이다. 아예 다른것이다. element를 받는 통로 일 뿐이지 element자체는 아니다.
그리고 export const home 함수에 새로운 JavaScript 요소인 async라는것을 추가할 것이다.
async는 나를 기다려주는 무엇인가 이다. 'JavaScript야 이 function의 어떤 부분은 꼭 기다려야 해' 라고 이야기하는것과 같다.
자바스크립트는 한번에 많은 일을 할수 있다. 이건 정말 멋지고 알아두어야 하는 내용이다. 그래서 원래 JavaScript는 기다리지 않는다.
'일단 Video를 살펴보고 있으니까 다음 render 작업도 같이 할게' 이런식으로간다.
우리는 JavaScript가 우릴 기다리게 해야한다. 그러려면 async라는 keyword를 추가해야한다. 


export const home = async (req, res) => {
  const videos = await Video.find({}); 				// awiat는  다음 과정이 끝날때까지 잠시 기다려 달라는 의미이다. 그리고 Video.find({})는 Database에 있는 모든 Video를 가져올것이다.
  res.render("home", { pageTitle: "Home", videos });  		//해당 과정이 끝나면 videos가 정해질거고 그 video를사용할것이다. 만약 async를 쓰지 않았다면 error가 날 것이다. awiat keyword는 async 없이는 쓸수가 없기 때문이다.
};

쉽다. awiat 뒤에 여러가지 다른옵션을 사용할수있다.
여기까지 마치고 새로고침을 하게되면 videos는 빈 array일것이다 생성된 video가 아직 없기 때문이다.
그리고 videos는 빈 array이고 나중에 멋지게 바뀔부분이다.

이 await 부분은 JavaScript에서 엄청 매력적인 부분이다. 왜냐면 내 코드를 멋지게 바꿔주기때문이다.
이렇게 하면 await 부분이 끝나기 전까지는 render 부분을 실행하지 않을 것이라는것을 확실하게 보여주기 때문이다.
해당과정이 성공적으로 끝나야 하는것은 아니다. 그냥 끝날때까지 기다리는것이다. 만약에 error가 생겨도 다음 render 부분을 실행한다.
왜냐면 끝났기 때문이다. 성공적으로 끝난게 아니라 그냥 끝난것이다. 
const videos = await Video.find({}); 	// 이렇게 짜는것은 좋지 않다. 발생할 수 있는 모든 error을 잡아야 한다.
그래서 우리는 try 와 catch를 사용할것이다.

try는 우리가 해야할 것들 그리고 만약 실패한다면 해당 error를 잡아낼것이다. 그래야 우리가 무슨 error 인지 볼수 있기 때문이다.
이런식으로 수정해준다.
 try {
    const videos = await Video.find({});
    res.render("home", { pageTitle: "Home", videos });
  } catch (error) {
    console.log(error);
    res.render("home", { pageTitle: "Home", videos: [] });		//error가 생기면 video는 없을 것이고 default로 videos는 빈 array가 될것이다.
  }
};

두가지를 배웠다 
첫번째 async 와 await
await: 해당 과정이 끝날 때까지 기다리게 하는것이다. 성공이나 실패여부가 중요한게 아니라 끝났다는 것이 중요하다.

두번째로 try catch
error가 생기면 default로 우린 잡아내지 못한다. 이건 Node.JS의 문제이다. 엄청 중요한 error가 있고, 우리가 잡아내지 못한다면 
우리는 error을 최선의 방법으로 잡아내야한다. Node.JS가 큰에러와 마주하면 아무것도 안하고 서있기때문에 
try cath를 사용하는것이다. error을 받아서 throw할 수 있기 때문이다.

video를 생성하고싶은데 그러려면 한가지를 더 해야 한다. 우린 아직 Upload를 할 수 없다.
다음 영상에서 Upload를 하게 될것이다.
다음영상에서 우리가 배울것은 어떻게 User가 Video file을 선택해서 어딘가에서 upload해서 해당 file url을 얻고
fileUrl로 Video를 생성하는것이다 어떻게 할지는 알고 있다. 어떤 것을 Upload해서 하지만 지금은 아무거나 Upload할수 있다. 좋은생각이 아니다.
Video 가 아닌 다른 file이 Upload되는것을 원하지 않는다. file을 Upload해서 middleware에서 받아 그 middleware에서 file을 upload하고 URL을 복사해서 Database에 저장하는것이다.

