#2.0 What is a Server

*서버란 무엇일까? 접속을 받아주는 무언가
-서버는 컴퓨터이다. 인터넷에 연결된 컴퓨터이다.
소프트웨어적 서버는 인터넷에 연결된 한 덩어리의 코드이다. 
하나는 물리적으로 늘켜져 있는 컴퓨터 라는 의미
다른의미로는내접속에 요청을 응답하는 컴퓨터이다.


#2.1 What is Express

express는 프레임워크이다.
아주많은 코드로 우리가  쉽게 이용할수있게만들어준것이다.
Express로 할수있는것은 몇줄로 서버로 만들수 있다.
이미 많은줄로 만들어져있어서 빨리 만들수있다.
Django,lalabel,Express:서버를 만들어주는 프레임워크이다.

우리가 Express를 사용하는 이유는 안정적이고 매우 유명하기때문이다.
첨단기술이아니다 새로운버전이아니다. -이러한말은 엄청안정적이고 거의 완성되었다는 뜻이다.
 
#2.2 Installing Express with NPM

npm=node package manager
express같은걸 만들고 공유하기 위해서 다운로드 링크를 만드는방법이 있고 파일을 복사에서
프로젝트 디렉토리에 붙여넣는 방법이있다. 하지만 좋은방법이 아니기 때문에
중앙집중화된 개념이다. node.js와 관련된사람들이 각자의 패키지를 집어넣어놓는다.
그리고 우리가 다운받을것을 넣어둔다.
여기서 다운받고 여기서 업데이트가 가능하다.
express는 월 12백만회 다운로드 되었다.
react는 월 32만회, react native,electron도 있다.

npm으로 프로젝트를 시작하려면 package manager로 사용하려면 npm이 정한방식으로 
시작해야한다.
-> npm init
npm init을 하게되면 package.json파일이 생성된다.
Json은 자바스크립트에서 정보를 담는 방식이다.

npm install express- express를 이 디렉토리 안에 설치한다.
설치하게 되면 package-lock.json과 node_modules가 설치된다. dpdencies가 추가된다.
package가 살아남는 방법이다.

package-lock.json: 신경쓰지말자
node_modules: 우리가 막 다운로드 받은거다 npm을 통해 다운받은것이다.

추가로 기억할것
package.json을 갖는것은 매우좋은일이다.(협업할때) 왜냐면 node_module을 일일이 줄필요가 없기 때문이다.



#2.3 Your First Express Server
.gitignore- 깃에 올리고싶은것만 올릴수 있게해주는 파일이다.
package-lock.json:package에 security이 관련되어있다.

Expressjs.com에 들어가서 Routing에 있는 문구를 복사 붙여넣기한다.
require의 뜻은 어디선가 node-module을 가져오는 것이다.
이경우에는 express라는이름의 폴더를 내파일속에서 찾으려고한다.
만약없으면 node_module에서 찾는다.
node-js에 장점 :모든것이 블럭단위로 구성되어있음 설치-require-import하면된다.

const express =require("express");	//express를 import하기
const app = express();		//app 변수를 선언해서 express를 실행하기

index.js를 node로 실행하고싶지않어서 package.json을 중앙 컨트롤 타워로 만들것이다.
내 app이 해야할것을 package.json에 넣을것이다.
package.json에 scripts부분에다가 "start": "node index.js"라고 입력을 해놓으면 npm start만으로도 서버를 실행할수 있다.



 #2.4 Handling Routes with Express

http,브라우저의 동작 방식
인터넷에서는 두개의 주요한 동사가 있는데
하나는GET, 하나는 POST이다.
내가 웹사이트에가면 URL을 적는데 브라우저가GetMethod를 실행한다. 기본적으로 브라우저가 페이지를 읽어온다.
우리가 로그인을 하게되면 POST method를 이용해서 브라우저가 정보를 전달한다.

request는 있는데 뭔가 응답을 하게 해야한다.
일반적으로 서버가 하는 일은 HTML로 응답하게 하는것이다.
뭔가 응답하게 하는 방법은 쉽다. 이게 express가 늘 하는일이기도 하다.

만약에 함수가 이렇게 존재한다면 function handleExmple(req,res){}
request object ,response object
request object:우리가 정보를 얻고자하면 누가 페이지를 요청했나 어떤종류의 데이터가 페이지에 전송되었나 알아낼때
예를 들어, 아이디와 패스워드를 전송하면 POST방식으로 전송한다면 서버에는 request object로  그정보를 알아낼수있다.

app.get("", something)메소드는 인자가 두개 들어간다. 
첫번쨰에는 주소가 들어가고
두번쨰에는 그것을 실행할 함수가 들어간다.
서버를 ES6로 만들것이다.



#2.5 ES6 on NodeJS using Babel

Babel이란 무엇일까?
기본적으로 바벨은 최신의 javascript코드들의 예전의 무난한 javascript코드들로 바꿔준다.
왜바꾸냐면 브라우저에서는 최신의 javascript코드들을 이해 못할때가 있기 때문이다.
바벨은 여러가지 방법으로 사용이 가능한데 많은 loader가 있다.
우리가 사용할 방법은 Babel node이다 .
다운하는 방법은-
npm install @babel/node

또Babel이 가지고 있는게있는데 Stage를 가지거 있다. stage3이면 브라우저한테 절반만 받아들여 질것이다..
만약 stage0을 사용하게 된다면 완전히 실험적인걸 얻게 될것이다.

우리가 사용할 것은 -env이다. 가장 최신버전이고 실험적인 버전은 아니다.
다운하는 방법은-
npm install @babel/preset-env

만약 React를 한다면 다른preset이 있다. 왜냐면 Babel도 우선 React가 어떻게 작동하는지 알아야 하기 때문이다.
우리는 .babelrc파일에 우리가 원하는 node.js와 JS와 관련된 필요한것들, 설정을 다 집어 넣을것이다.
.bablerc 파일은 우리가 작업하고 있는 디렉토리에다가 만들면된다.

*Babel의 동작과정
1.Babel이 실행되기 전에 .babelrc파일을 찾아보고
2.babelrc파일에 설정해둔 Preset을 읽고
3.이해한다.

*.babelrc 파일의 내용
{
  "presets": ["@babel/preset-env"]
}
*작동하는지 테스트해보려면?
1 .const express = require('express'); 대신에 최신의 js버전인 import express from "express";
(둘은 같은내용이다.)
2. package.json에다가 "scripts": node index.js를 babel-node index.js로 바꾼다.
3. 이렇게 실행 하게된다면 바벨이 못생긴 코드로 바꾸게 될것이다.
4. 그런다음 node.js로 실행 할것이다.
이렇게 하면 이런에러가 뜨는데
Cannot find module '@babel/core'
그러면 npm install @babel/core를 해주면된다.

화살표 함수를 이해해보자
-함수란 무엇일까? 함수는 원하는 작업을 수행하기 위해만들어 놓은 코드 블록이다.
ES6이전에 함수를 표현하는 방법에는 무엇이있을까>
1.함수 선언
function foo(){} 

2.함수 표현식
const foo = function(){}
함수의 이름이 없는 익명함수를 변수에 할당하는 방식이다.

화살표함수는 왜쓸까?
함수를 표현해지는것이 간단해지기 때문에 사용한다.
그리고 화살표 함수는 항상 익명함수이다.

1. function 키워드를 생략할 수있다.
2. 함수의 매개변수가 1개라면 괄호()를 생략할수 있다.
3. 함수 바디가 표현식 하나라면 중괄호와 return 문을 생략할수 있다.

function handleProfile(req, res) {
   res.send("you are on my profile");
 }
const handleProfile = (req, res) =>
 res.send("you are on my profile");
로 바꿀수있다.

만약에 project에 필요한 것(depedencies)에 추가되는것 말고 개발자로 살면서 필요한것들을 
npm에서 install할때는 npm install ~~ -D를 사용하면된다.
그렇게되면 package.json파일에 "devDependencies"에 추가 된다.

nodemon: node.js소스 수정시 자동으로 서버를 재시작해주는 프로그램
nodemon이라는 패키지를 설치할것이다. 
그래서 npm install nodemon -D를 해준다 그리고 script에 babel-node index.js를 
nodemon --exec babel-node index.js로 수정해준다.


#2.6 Express Core: Middlewares

*내가 일단 저장하고 재시작하면 Babel node가 감지하고 재시작해서 두번 실행되는것이다.
scripts: "start": "nodemon --exec babel-node index.js --delay 2"
--delay 2를 뒤에 붙이게 된다면 2초뒤에 시작한다.

*express를 할때 middleware라는 이름의 녀석을 알아야한다. 어려운 express의 내용이다.
middleware:처리가 끝날때까지 연결되어있는것이다. 유저와 마지막 응답사이에 있는것이다.

*middleware 함수들은 매개변수를 원래가지는것 (req, res) 말고도 하나를 더가진다. (req,res,next).
다른함수들은 보통은 매개변수로 next를 가지지 않는다. 왜냐하면 마지막으로 도달하는 함수이기 때문이다.

*MiddleWare의 예시
const betweenHome = (req, res, next) => {
  console.log("I'm between");
  next();		//next를 호출해야 매개변수로 들어간 인자인 handleHome을 호출할수있다.
};
middleware는 내가 원하는만큼 가질수있다. 파일을 전송할때 중간에서 가로챌수도있다. 모든접속에대한 로그를 작성하는 
미들웨어도 작성할수이따.


app.use(betweenHome);
미들웨어를 사용할건데 웹사이트에서 일어나는 모든것에 대해 적용한다.

express에서는 문장의 순서가 중요하다
접속이 있으면 위에서 아래로 실행한다. 미들웨어를 제일 위에다 넣어야지 반환해서 돌아오기 떄문에
제일위에다가 작성하는 것이 좋다.

#2.7 Express Core: Middlewares part Two

Morgan이라는 middleware를 설치해보자
-npm install morgan
logging에 도움을 주는 middleware이다:로깅이란 어디서 무슨일이 일어났는지이다.
설치하고 해야할 일들
1.이렇게 다운을 받게되면 package.json파일에 depedency부분에 추가된다 
2.js파일에다가 import 해줘야한다.
-import morgan from "morgan";
3.인자와 함께 사용한다. 미들웨어로 morgan을 tiny라는 인자를 이용해서
-app.use(morgan("tiny")); 

이외에도 많은 미들웨어가 있다. 

우리는 helmet이라는 middleware를 설치해보자
-npm install helmet
node.js의 안전성을 추가해준다(보안)

*middleware로 연결을 끊어버리는방법
middleware가  route전에 response를 보낸다면  연결이 일어나지 못한다.

cookie-parser와 body-parser도 설치할것이다.
-npm install body-parser
-npm install cookie-parser
cookie와body를 다루는 것을 도와준다.
body로부터 정보를 얻을수 있게도와준다.
cookie에 유저정보를 저장할것이다 session을 다루기 위해서
기본적으로 form을 채워서 나에게 전송한다면 서버를 의해서  특정한형태로 받아져야만한다.
내가 하려는건 form을 받으면 그데이터를 갖고있는 request object에 접근하기 원한다.

body-parser에는 정의해야하는 옵션이 있다. json,text,urlencoded
우리가 무엇을 전송해야하는지 알아야하기 때문이다.
이게 서버가 유저로부터 받은정보를 이해하는 과정이다.
사용예시
app.use(bodyParser.json());
app.use(bodyParser.urlencode({ extended: true }));



#2.8 Express Core: Routing

init에 뭘할거냐면 init.js에서 application을 호출한다.
app object를 init.js에 줘야한다.

자바스크립트 ES6에는 흥미로운게게있는데 모듈이라는게 있어서 다른파일에서의 코드를 가져다가 쓸수있다.
export default app; 누군가 app을 불러올때 app을 넘겨주겠다는 이야기이다.

express에서 router는 route들의 복잡함을 쪼개주는데 사용할수있다.
/user/logout ,/user/passwdchange 이럴때 라우터를 사용할 수가 있다.
router.js를 만들고 expresss를 import한다.

export const userRouter = express.Router();
-userRouter라는 변수로 담아서 export한다.

export default app				//만약에 default로 export를 하게 된다면 
import express from "express"; 		//이런식으로 import할수있다.
따라서 
export const userRouter = express.Router(); 	//이친구는
import {userRouter } from "./router";		//이렇게 import 해주어야한다.

app.use() 	메소드의 의미는?		//누군가 /user 경로에 접속하면 이라우터의
					// router.js 에 있는 모든 경로를 사용하겠다는뜻

#2.9 MVC Pattern part One
MVC는 Model ,View, Control을 의미한다.
model:데이터 데이터베이스이다.
view:데이터가 어떻게 생겼냐 template인데 아직 안배웠음
controller:데이터를 찾는함수이다. url을 이용해 실행하는 함수가 Controller이다.

export const videoRouter = express.Router();	//오직 이변수만 export한다.
export default videoRouter; 			//파일로 export한다.

누군가가 "/" url을 다뤄야한다.



#2.10 MVC Pattern part Two

라우팅설정할때 url을 user/id/edit 이런식으로 하면 어딘가 다른데서 사용하려면 경로를 외워야한다 
그러기 때문에 더 쉬운방법을 사용한다.


express는 똑똑해서 :id라고해놓으면 이런형태의 url을보고 id를 텍스트로 인식하는데 값이변한다고 알게된다.
나중에 내코드로 logout으로 redirect한다고 생각해보자 home url이뭔지 알아야한다, 하지만 routes.home으로 redirect하면 편하다.




#2.11 MVC Pattern part Three

controller: 어떤 일이 어떻게 발생하는지에 관한 로직이다.
컨트롤러들에 많은 함수들을 추가 할것이다.

controller 폴더를 만들고 video controller와 user controller를 만들게된다.
대개 프로젝트에 있는 각 모델 마다 컨트롤러를 만들게 된다.

wetube에서는 video, 비디오를 업로드할 users 만들게된다. 


이런 방식으로 하는 이유는 사용자 정보를 알아보기위해 데이터베이스에 조회도 가능하고, 에러인지 아닌지 알려줄수도있다.
그래서 해야 할일이 커지면 코드를 분리 하는 것이 좋다.



#2.12 Recap

1.init.js
init.js에는 app.js에서 import한 application이 있다.

2.app.js
application 관련 코드들은 app.js파일에 담겨있다.
express 를import했고, express를 실행한 결과를 app 상수로 만들었다. 그리고 middleware들을 추가했다.
사용한 middleware
 1)cookieParser는 cookie를 전달받아서 사용할 수 있도록 만들어 주는 미들웨어다. 사용자 인증 같은곳에서 쿠키를 검사할때 사용
 2)bodyParser는 사용자가 웹사이트로 전달하는 정보들을 검사하는 미들웨어다. request정보에서 form이나 json형태로 된 body를 검사
  -아바타의 사진이나 비디오를 업로드 할 때, 제목이나 댓글 같은 정보를 전달할때 form에 담아서 업로드해야함
 3)helmet은 application이 더 안전하도록 만들어 준다.
 4)morgan은 application에서 발생하는 모든일들을 logging 하는것이다.

3. Router :그리고 라우터 3개를 사용할것이다. 
globalRouter: /home, /search, /join, /login, /logout URL이 담겨있다.
userRouter: /user/주소 들이 들어가있다.
videoRouter:  /video/에관련된 주소들이 들어가있음
routes.js: 모든 주소들을 정의해놨다. 한파일이 바뀌면 모두 적용되도록 할수 있다.

4. Controller:모든 router의 로직들은 모두 userController나 videoController에 정의되어있음
controller안에 들어가 있는것들은 모두 함수들이다 . (Join,Login,Logout,User Detail 같은것들을 리턴)

다음 강의에서는 pug라는걸 설치할것이다. pug는 express에서 view를 다루는 방식중 하나이다.
express로 HTML을 보여줄수 있다. res.send 대신에 실제 HTML을 전달할것이다. CSS같은 것들로 멋지게 꾸밀수있다.
MVC에서 V부분이다. C부분은 이미했고 ,pug로 V부분을 할것이다.
pug는 사용하기 쉽고 ,express에 설치하기도 쉽다. HTML을 예쁘게 만들어준다.


#2.13 Installing Pug
view engine이다.
다운하는 방법은
-npm install pug

set함수에는  name과 value가 필요하다.
view engine 설정을 바꿀건데 설정의 기본값은 undefined이다.
그래서 view를 pug로 설정하고 싶다면
app.set("view engine", "pug") 로 설정하면 된다.

pug와 express에는  view 파일들의 위치에 관한 기본 설정들이 있다.
application의 화면이 담긴 디렉토리나 디렉토리의 배열을 입력하면됨.
html파일을 저장해야하는 폴더의 기본 값은 프로젝트의 작업 디렉토리 +'/views' 이다.
그래서 views 라는 폴더를 만든다.
그리고 home을 만들건데 확장자는 html대신에 pug를 이용하면된다.
home.pug가 생성이 완료되면 videoController.js에 들어가서
res.send("Home") 을 res.render("home")으로 바꾸어준다. 완료!

지금까지는 HTML,CSS에 대해서만 알고 있었는데, 계속 header,footer같은 부분을 복붙해야하기 
떄문에 못생겼었다.
express에서 pug를 사용한다면 이 문제를 쉽게 해결할 수 있다. pug는 이제
시작일 뿐이다.

다음 비디오 에서는 template 만들어 볼것이다. res.send 대신에 모두 res.render를 사용할것이다.
다음 비디오에서는 layout을 이용해 html을 멋지게 만드는것을 배울것이다.


#2.14 Layouts with Pug

HTML과 CSS만으로 작업할떄는 똑같은것을 반복하는 경우가 많기 떄문에 별로 좋지않다.
pug와 같은 것들로 작업을 하면, html을 생성하게 하는 javascript의 위력을 사용할수있다.
layout이라는 폴더를 views 폴더 안에 생성한다. 그리고 main.pug 파일을 만든다.
여기에 html작성을 시작한다. 모든페이지의 토대가 되는것들을 작성
예를들어 header footer, head,html태그,css link를 필요로 한다.
pug가 작동하는 방식은 html의 방식과 다르다. <>같은 방식을 사용하지 않는다. 대신에 들여쓰기를 사용한다.
탭한칸을 쓰거나 스페이스 4칸을 쓴다


탭 바깥에 있는 코드라면, 윗줄 다음의 코드라는 뜻이다. 탭 안쪽에 있다면 children이다.
layout을 어떻게 등록하냐면 파일로가서 p 태그 이전에 제일 윗부분에 extension(확장)이라는걸 해주면된다.
-extends layouts/main.pug	//main을 extends해주면된다.
 

#2.15 Partials with Pug

Partials라는걸 알아보자.
partials는 페이지의 일부분이다. 조직적인 목적으로만들어진다.
header.pug 와 footer.pug라는 파일을 만들자
footer파일에는 footer태그를 추가하고 이안에는 아이콘이 들어갈 것이다. 유튜브 아이콘으로 하자.
fontawesome-아이콘 다운받기

pug에서 div를 추가할때 클래스명 앞에 div라고 적지 않아도 된다.
ex) <div class="footer__icon>
이라고 쓰고싶으면 
.footer__icon
이라고 사용해도 가능하다.

그리고 main에가서 footer부분을 사용하고 싶다면 include ../partials/footer 이렇게 footer를 include 해주면 된다.
pug에서 자바스크립트 문구를 사용하고 싶다면 #{} 안에다가 넣으면된다.
ex)#{new Date().getFullYear()}
block은 창문이고 창문을 달아야 창문안에 내용물이 보인다.
One single source of truth(한 곳 에서만 정보를 보관): 더 나은 코드를 만들어 주는 원칙

다음 비디오에서는 pug에 정보와 변수를 추가해서 템플릿을 더 스마트하게 작성하는 방법을 배운다.

#2.16 Local Variables in Pug

템플릿에 정보를 추가해보자
컨트롤러에 있는 정보를 템플릿에 추가하는 법은 두가지가 있다.
1. 전체 템플릿에 추가하기(locals)이용하기
2. 한 템플릿에만 추가하기

템플릿 전체에 추가하는 방법(헤더가 라우트객체에 접근하는법)
미들웨어를 이용해야한다. 미들웨어은 레이어 같은것이다. 위에서 밑으로 한단계씩 내려간다.
처음에 ,view engine을 pug으로 설정한다.
cookie를 파싱하고, body에 담긴 정보를 파싱한다. 그다음에 helmet,morgan이있고 그 후에
컨트롤러와 라우트들이 있다. helmet을 제일 위에 둬야한다. 그리고 locals라는 미들웨어를 만들것이다.
localsMiddleware: local변수를 global 변수로 사용하도록 만들어 주는 거라고 생각하면 된다.

express문서의 res.locals()메소드를 살펴보자 
res.locals()메소드는 로컬 변수 응답을 포함하는 객체입니다. 유용한 정보를 내보내는데 유용합니다.

pug의 문제점은, vscode가 자동완성을 해주지 않는 다는 것이다. pug는 지원하지 않는다.

locals에 로컬변수를 저장하면, 이 변수들을 템플릿에서 이용할수 있다.
전역적으로 사용할수 있는 변수를 추가하는 방법을 알아봤다. 모든 템플릿에서 사용할수 있다. 템플릿,뷰,모든곳 에서 사용이 가능하다.
이 멋진 미들웨어는 코드 사이에 들어가 있어서, next를 호출해야한다. 다음 함수로 넘어간다는 뜻이다.
이경우에는 다음에 있는 라우터들로 넘어가게된다.



#2.17 Template Variables in Pug

2. 한템플릿에만 추가하는 방법 

res.render(view[,local][,callback])
view 와 전달된 html string을 client에게 전달한다.
--인자설명
-view: 템플릿
-locals: view를 위해 정의된 지역 변수 properties , 템플릿에 추가할 정보가 담긴 객체이다.
-callback: callback함수이다. 이것이 제공되면, 메소드는 가능한 에러와 전달된 string을 둘다 리턴한다.
 
render함수의 첫번째 인자는 템플릿이고, 두번쨰 인자는 템플릿에 추가할 정보가 담긴 객체이다.

그래서 Controller에서  render 함수뒤에 인자를 하나 더붙이는 방식으로 한 템플릿에서만 변수를 추가하는 방법이다.
이게 정확한 정보를 추가하는 방법인 경우가 있을것이다.

다음에는 컨트롤러를 조금 더 깊이 공부할것이다. 컨트롤러가 화면표시 이외에 하는 일들을 배울것이다.



#2.18 Search Controller

컨트롤러를 추가하기전에 페이지를 추가해보자

검색창을 만드는 과정

1. header.pug에 검색창을 만들것임으로
  .header__column
        form(action=routes.search, method="get")
            input(type="text", placeholder="Search by term..", name="term")
헤더에 이러한 코드를 추가해준다.
form은 입력양식틀 이고, action은 routes.search로 이동하게 해주는것이다. 컨트롤러가 query에 접근하려면 method가 get이어야 해서 get이라고 적어준다.
iput은 입력 을받는 창이다. name ="term"을 지우게 된다면 url 뒤에 검색하는 목록이 ?이 뜨게된다.

2.search.pug에도 추가해야할것이 있다.
	h3 Searching for: #{searchingBy}
라는 코드를 추가해준다. searchingBy라는 변수를 사용할것이다.

3.변수를 사용하기위해 Search를 포함하는 컨트롤러에 들어가도록한다.
VideoController.js에서 이제 우리는 리턴을 해야함으로 화살표함수 뒤에 {}대괄호를 추가해준다.
3-1)export const search = (req, res) => {}

req.query에 우리가 검색하는 목록이있다.
req.query.term 이라는 곳은 express가 query를 집어넣는것이다. 많은것들이 추가 가능하다.
ex) andorid & apple 이렇게 두개도 검색가능하다.

그래서 변수를 이제 선언해줄것인데  
const searchingBy= req.query.term이렇게 해주면된다.
하지만 이건 ECMAScript, ES6 이전의 코딩 방식이므로
3-2)const{ } =req; 
이렇게 써주고 {}안에 query를 가져올것이다. 그리고 query안에 term을 가져오고 싶음으로
3-3)const{query:{term}=req;}
이렇게 해주면된다. 그리고 term을 이용하지않고 변수명을 searchingBy로 등록할것임으로
3-4)const{query:{term:searchingBy}=req;}
이렇게해주고
밑에 render문뒤에 변수를 searchingBy를 등록해줘야한다.
3-5)res.render("search", { pageTitle: "Search", searchingBy });
하면 완성이다.

4.controller완성
export const search = (req, res) => {

 const {
    query: { term: searchingBy },
  } = req;
  res.render("search", { pageTitle: "Search", searchingBy });
};



컨트롤러도 query에 접근하려면, method가 get이어야 한다.
ex) form(action=routes.search, method="get")

다음강의에서는 mixins라는걸 만들어볼것이다.



#2.19 Join : Log In HTML


꿀팁
퍼그에서 텍스트로 시작하고싶으면 |를 먼저 입력하면된다.

우리는 어떤 페이지를 만들어야 할까?계획을 짜보자

Home페이지를 만들어야한다.
Home 화면에 .videos (div이다) 를 추가하고  그안에 h1 태그에 video 텍스트를 추가

join페이지 작업은 form을 넣어야한다. 우선 .form__container (div이다) 그 안에 form을 추가한다.
.form__container
    form(action=routes.login,method="post");
여기서 method 를 post로 하는 이유는, 만약에 method를 get으로 하면 모든정보가 보이게 되기 때문이다.

그리고 로그인,회원가입 폼을 만든후에는 partial을 만들것이다.
만드는 이유는 button을 두개, 아니 만들고 싶은 만큼 만들기 위해 partial을 만들것이다.
버튼 하나는 깃헙계정으로 로그인하기 
그리고 다른버튼은 페이스북 계정으로 로그인하기 이다.


그리고 CSS에서 BEM에대해서 공부해보도록 하자.(내가 알아야할 내용이다.)




#2.20 Change Profile HTML

우리는 editProfile을 작업을 하고있는데 userDetail을 가리킨다.
왜냐하면 routes.js에서 USER_DETAIL = "/:id"라고 선언했는데 /edit-profile을 id로 보기때문이다.

그러면 우리는 userRouter.js로가서 
userRouter.get(routes.userDetail, userDetail):
userRouter.get(routes.editProfile, editProfile);
userRouter.get(routes.changePassword, changePassword);
이렇게 되어있는것을
userRouter.get(routes.editProfile, editProfile);
userRouter.get(routes.changePassword, changePassword);
userRouter.get(routes.userDetail, userDetail):
이렇게 순서를 바꿔주면 문제가 해결이 된다.

그리고
extends layouts/main

block content
    .form-container
        form(action=routes.editProfile,method="post")
            label(for="avatar") Avatar,
            input(type="file", id="avatar", name="avatar")
            input(type="text",placeholder="Name",name="name")
            input(type="email",placeholder="Name",name="email")
            input(type="submit", value="Update Profile")
        a.from-container__link(href=routes.changePassword) Change Password
editDetail.pug파일을 이렇게 수정해줬다.



